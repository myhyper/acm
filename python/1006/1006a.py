import sys
f = sys.stdin
debug = True
debug = None
if debug: f = open("1006d.txt")
tc = int( f.readline() )
if debug: import time

#data = [0000,0005,0006,0007,0008,0050,0055,0056,0057,0058,0061,0064,0072,0079,0083,0500,0505,0506,0507,0508,0550,0555,0556,0557,0558,0561,0564,0572,0579,0583,0610,0615,0616,0617,0618,0642,0649,0720,0725,0726,0727,0728,0791,0794,0830,0835,0836,0837,0838,1000,1005,1006,1007,1008,1050,1055,1056,1057,1058,1061,1064,1072,1079,1083,1500,1505,1506,1507,1508,1550,1555,1556,1557,1558,1561,1564,1572,1579,1583,1610,1615,1616,1617,1618,1642,1649,1720,1725,1726,1727,1728,1791,1794,1830,1835,1836,1837,1838,2000,2005,2006,2007,2008,2050,2055,2056,2057,2058,2061,2064,2072,2079,2083,2500,2505,2506,2507,2508,2550,2555,2556,2557,2558,2561,2564,2572,2579,2583,2610,2615,2616,2617,2618,2642,2649,2720,2725,2726,2727,2728,2791,2794,2830,2835,2836,2837,2838,3000,3005,3006,3007,3008,3050,3055,3056,3057,3058,3061,3064,3072,3079,3083,3500,3505,3506,3507,3508,3550,3555,3556,3557,3558,3561,3564,3572,3579,3583,3610,3615,3616,3617,3618,3642,3649,3720,3725,3726,3727,3728,3791,3794,3830,3835,3836,3837,3838,4200,4205,4206,4207,4208,4250,4255,4256,4257,4258,4261,4264,4272,4279,4283,4910,4915,4916,4917,4918,4942,4949,5000,5005,5006,5007,5008,5050,5055,5056,5057,5058,5061,5064,5072,5079,5083,5500,5505,5506,5507,5508,5550,5555,5556,5557,5558,5561,5564,5572,5579,5583,5610,5615,5616,5617,5618,5642,5649,5720,5725,5726,5727,5728,5791,5794,5830,5835,5836,5837,5838,6100,6105,6106,6107,6108,6150,6155,6156,6157,6158,6161,6164,6172,6179,6183,6420,6425,6426,6427,6428,6491,6494,7200,7205,7206,7207,7208,7250,7255,7256,7257,7258,7261,7264,7272,7279,7283,7910,7915,7916,7917,7918,7942,7949,8300,8305,8306,8307,8308,8350,8355,8356,8357,8358,8361,8364,8372,8379,8383,9100,9105,9106,9107,9108,9150,9155,9156,9157,9158,9161,9164,9172,9179,9183,9420,9425,9426,9427,9428,9491,9494]
data1 = [
    "3000",
    "3083",
    "3830",
    "1000",
    "1083",
    "1830",
    "2000",
    "2083",
    "2830",
    "0000",
    "3005",
    "3006",
    "3007",
    "3008",
    "3050",
    "3061",
    "3064",
    "3072",
    "3079",
    "0083",
    "3500",
    "3583",
    "3610",
    "3642",
    "3649",
    "3720",
    "3791",
    "3794",
    "0830",
    "3835",
    "3836",
    "3837",
    "3838",
    "4200",
    "4283",
    "4910",
    "4942",
    "4949",
    "8300",
    "8383",
    "9100",
    "9183",
    "9420",
    "9491",
    "9494",
    "1836",
    "1837",
    "1838",
    "0061",
    "2005",
    "2006",
    "2007",
    "2008",
    "2050",
    "2061",
    "2064",
    "2072",
    "2079",
    "0064",
    "2500",
    "2583",
    "2610",
    "2642",
    "2649",
    "2720",
    "2791",
    "2794",
    "0072",
    "2835",
    "2836",
    "2837",
    "2838",
    "0079",
    "0006",
    "0500",
    "0583",
    "0610",
    "0642",
    "3055",
    "3056",
    "3057",
    "3058",
    "0649",
    "0720",
    "0791",
    "0794",
    "0007",
    "0835",
    "3505",
    "3506",
    "3507",
    "3508",
    "3550",
    "3561",
    "3564",
    "3572",
    "3579",
    "0836",
    "0837",
    "3615",
    "3616",
    "3617",
    "3618",
    "0838",
    "0008",
    "1005",
    "3725",
    "3726",
    "3727",
    "3728",
    "1006",
    "1007",
    "1008",
    "1050",
    "1061",
    "1064",
    "1072",
    "1079",
    "4205",
    "4206",
    "4207",
    "4208",
    "4250",
    "4261",
    "4264",
    "4272",
    "4279",
    "0050",
    "1500",
    "4915",
    "4916",
    "4917",
    "4918",
    "1583",
    "1610",
    "5000",
    "5083",
    "5830",
    "6100",
    "6183",
    "6420",
    "6491",
    "6494",
    "7200",
    "7283",
    "7910",
    "7942",
    "7949",
    "1642",
    "8305",
    "8306",
    "8307",
    "8308",
    "8350",
    "8361",
    "8364",
    "8372",
    "8379",
    "1649",
    "1720",
    "9105",
    "9106",
    "9107",
    "9108",
    "9150",
    "9161",
    "9164",
    "9172",
    "9179",
    "1791",
    "1794",
    "9425",
    "9426",
    "9427",
    "9428",
    "0005",
    "1835",
    "2550",
    "2561",
    "2564",
    "2572",
    "2579",
    "0726",
    "1505",
    "2615",
    "2616",
    "2617",
    "2618",
    "1506",
    "1507",
    "4255",
    "4256",
    "4257",
    "4258",
    "1508",
    "2725",
    "2726",
    "2727",
    "2728",
    "1550",
    "1561",
    "1564",
    "1572",
    "1579",
    "0727",
    "0728",
    "1615",
    "5005",
    "5006",
    "5007",
    "5008",
    "5050",
    "5061",
    "5064",
    "5072",
    "5079",
    "1616",
    "5500",
    "5583",
    "5610",
    "5642",
    "5649",
    "5720",
    "5791",
    "5794",
    "1617",
    "5835",
    "5836",
    "5837",
    "5838",
    "1618",
    "6105",
    "6106",
    "6107",
    "6108",
    "6150",
    "6161",
    "6164",
    "6172",
    "6179",
    "0507",
    "0508",
    "6425",
    "6426",
    "6427",
    "6428",
    "0550",
    "1725",
    "1726",
    "7205",
    "7206",
    "7207",
    "7208",
    "7250",
    "7261",
    "7264",
    "7272",
    "7279",
    "1727",
    "1728",
    "7915",
    "7916",
    "7917",
    "7918",
    "0055",
    "0561",
    "0564",
    "0572",
    "0579",
    "0056",
    "0057",
    "0615",
    "8355",
    "8356",
    "8357",
    "8358",
    "0616",
    "0617",
    "3555",
    "3556",
    "3557",
    "3558",
    "1055",
    "1056",
    "1057",
    "2055",
    "2056",
    "9155",
    "9156",
    "9157",
    "9158",
    "2057",
    "2058",
    "1058",
    "0618",
    "0058",
    "0505",
    "0506",
    "0725",
    "2505",
    "2506",
    "2507",
    "2508",
    "0556",
    "0557",
    "0558",
    "2555",
    "5505",
    "5506",
    "5507",
    "6155",
    "6156",
    "6157",
    "6158",
    "5508",
    "5550",
    "0555",
    "5561",
    "5564",
    "5572",
    "5579",
    "2556",
    "2557",
    "5615",
    "5616",
    "5617",
    "5618",
    "2558",
    "1555",
    "1556",
    "5725",
    "5726",
    "7255",
    "7256",
    "7257",
    "7258",
    "5727",
    "5728",
    "5055",
    "5056",
    "5057",
    "5058",
    "1557",
    "1558",
    "5556",
    "5557",
    "5558",
    "5555"
]
data2 = [
3,
3,
3,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
8,
8,
8,
8
]



data3 = [
"3000",
"3830",
"1000",
"1830",
"2000",
"2830",
"0000",
"3500",
"3610",
"3720",
"0830",
"4200",
"4910",
"8300",
"9100",
"9420",
"1836",
"0061",
"2500",
"2610",
"2720",
"0072",
"2835",
"0079",
"0500",
"0610",
"3055",
"0649",
"0720",
"0007",
"0835",
"3505",
"0836",
"3615",
"0838",
"0008",
"3725",
"1006",
"4205",
"0050",
"1500",
"4915",
"1583",
"1610",
"5000",
"5830",
"6100",
"6420",
"7200",
"7910",
"1642",
"8305",
"1649",
"1720",
"9105",
"1791",
"9425",
"0005",
"1835",
"2550",
"0726",
"1505",
"2615",
"1506",
"4255",
"1508",
"2725",
"1550",
"0727",
"1615",
"5005",
"1616",
"5500",
"5610",
"5720",
"1617",
"5835",
"1618",
"6105",
"0507",
"6425",
"0550",
"1725",
"7205",
"1727",
"7915",
"0055",
"0561",
"0056",
"0615",
"8355",
"0616",
"3555",
"1055",
"9155",
"2057",
"0618",
"0058",
"0505",
"0725",
"2505",
"0556",
"6155",
"5508",
"5615",
"2558",
"5725",
"7255",
"5727",
"5055",
"1557",
"5556",
]

data4 = [
3,
3,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
4,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
5,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
6,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
8,
]


data5 = [

[
"0000",
"0083",
"0830",
"0061",
"0064",
"0072",
"0079",
"0006",
"0500",
"0583",
"0610",
"0642",
"0649",
"0720",
"0791",
"0794",
"0007",
"0835",
"0836",
"0837",
"0838",
"0008",
"0050",
"0005",
"0726",
"0727",
"0728",
"0507",
"0508",
"0550",
"0055",
"0561",
"0564",
"0572",
"0579",
"0056",
"0057",
"0615",
"0616",
"0617",
"0618",
"0058",
"0505",
"0506",
"0725",
"0556",
"0557",
"0558",
"0555",
],
[
"1000",
"1083",
"1830",
"1836",
"1837",
"1838",
"1005",
"1006",
"1007",
"1008",
"1050",
"1061",
"1064",
"1072",
"1079",
"1500",
"1583",
"1610",
"1642",
"1649",
"1720",
"1791",
"1794",
"1835",
"1505",
"1506",
"1507",
"1508",
"1550",
"1561",
"1564",
"1572",
"1579",
"1615",
"1616",
"1617",
"1618",
"1725",
"1726",
"1727",
"1728",
"1055",
"1056",
"1057",
"1058",
"1555",
"1556",
"1557",
"1558",
],
[
"2000",
"2083",
"2830",
"2005",
"2006",
"2007",
"2008",
"2050",
"2061",
"2064",
"2072",
"2079",
"2500",
"2583",
"2610",
"2642",
"2649",
"2720",
"2791",
"2794",
"2835",
"2836",
"2837",
"2838",
"2550",
"2561",
"2564",
"2572",
"2579",
"2615",
"2616",
"2617",
"2618",
"2725",
"2726",
"2727",
"2728",
"2055",
"2056",
"2057",
"2058",
"2505",
"2506",
"2507",
"2508",
"2555",
"2556",
"2557",
"2558",
],
[
"3000",
"3083",
"3830",
"3005",
"3006",
"3007",
"3008",
"3050",
"3061",
"3064",
"3072",
"3079",
"3500",
"3583",
"3610",
"3642",
"3649",
"3720",
"3791",
"3794",
"3835",
"3836",
"3837",
"3838",
"3055",
"3056",
"3057",
"3058",
"3505",
"3506",
"3507",
"3508",
"3550",
"3561",
"3564",
"3572",
"3579",
"3615",
"3616",
"3617",
"3618",
"3725",
"3726",
"3727",
"3728",
"3555",
"3556",
"3557",
"3558",
],
[
"4200",
"4283",
"4910",
"4942",
"4949",
"4205",
"4206",
"4207",
"4208",
"4250",
"4261",
"4264",
"4272",
"4279",
"4915",
"4916",
"4917",
"4918",
"4255",
"4256",
"4257",
"4258",
],
[
"5000",
"5083",
"5830",
"5005",
"5006",
"5007",
"5008",
"5050",
"5061",
"5064",
"5072",
"5079",
"5500",
"5583",
"5610",
"5642",
"5649",
"5720",
"5791",
"5794",
"5835",
"5836",
"5837",
"5838",
"5505",
"5506",
"5507",
"5508",
"5550",
"5561",
"5564",
"5572",
"5579",
"5615",
"5616",
"5617",
"5618",
"5725",
"5726",
"5727",
"5728",
"5055",
"5056",
"5057",
"5058",
"5556",
"5557",
"5558",
"5555",
],
[
"6100",
"6183",
"6420",
"6491",
"6494",
"6105",
"6106",
"6107",
"6108",
"6150",
"6161",
"6164",
"6172",
"6179",
"6425",
"6426",
"6427",
"6428",
"6155",
"6156",
"6157",
"6158",
],[
"7200",
"7283",
"7910",
"7942",
"7949",
"7205",
"7206",
"7207",
"7208",
"7250",
"7261",
"7264",
"7272",
"7279",
"7915",
"7916",
"7917",
"7918",
"7255",
"7256",
"7257",
"7258",
],[
"8300",
"8383",
"8305",
"8306",
"8307",
"8308",
"8350",
"8361",
"8364",
"8372",
"8379",
"8355",
"8356",
"8357",
"8358",
],[
"9100",
"9183",
"9420",
"9491",
"9494",
"9105",
"9106",
"9107",
"9108",
"9150",
"9161",
"9164",
"9172",
"9179",
"9425",
"9426",
"9427",
"9428",
"9155",
"9156",
"9157",
"9158",
]
]
def get_val(idx):
    arr1 = [5,6,7,8]
    if idx in arr1: return 2
    if idx == 3: return 0
    return 1
# a->b 로 갈 수 있는지 체크 한다.
def check(a,b, idx):
    x = idx
    sx = idx-1
    dx = idx+1
    x += l
    sx += l
    dx += l
    x %= l
    sx %= l
    dx %= l

    up = w[0][x] + w[1][x] <= n
    up3 = w[0][dx] + w[1][dx] <= n
    left1 = w[0][sx] + w[0][x] <= n
    left2 = w[1][sx] + w[0][x] <= n
    right1 = w[0][dx] + w[0][x] <= n
    right2 = w[1][dx] + w[1][x] <= n
    if 0==a and not up: return False
    if 1==a and not left1: return False
    if 2==a and not left2: return False
    if 3==a and not (left1 and left2): return False
    if 4==a and not (left1 and right2): return False
    if 8==a and not (right1 and right2): return False
    if 9==a and not (left2 and right1): return False
        
    if 0==b and not up3: return False
    if 3==b and not (left1 and left2): return False
    if 6==b and not right1: return False
    if 7==b and not right2: return False
    if 8==b and not (right1 and right2): return False
    
    return True
    #return check_ab(a,b)
def check_ab(a,b):
    arr1 = [0,1,2,3,5]
    arr2 = [0,5,6,7,8]
    if a in arr1 and b in arr2:
        return True
    if 8 == a and 3 == b:
        return True
    if (4==a or 7==a) and (2==b or 9==b):
        return True
    if (6==a or 9==a) and (1==b or 4==b):
        return True
    return False
if debug: start_time = time.process_time()
for t in range(tc):
    ip = f.readline()
    if '\n' ==ip: ip = f.readline()
    l,n = map(int, ip.split())
    w=[]
    w.append(list(map(int, f.readline().split())))
    w.append(list(map(int, f.readline().split())))
    dp  = [-1] * l
    if False:
        for i in range(len(data1)):
            for j in range(len(data1)):
                if data2[i] < data2[j]:
                    tmp = data2[i]
                    data2[i] = data2[j]
                    data2[j] = tmp
                    tmp = data1[i]
                    data1[i] = data1[j]
                    data1[j] = tmp
        for i in range(len(data1)):
            print("{}".format(data2[i]))
    if False: # for print data
        cnt=0
        for j in range(10000):
            a = int(j / 1000) % 10
            b = int(j /  100) % 10
            c = int(j /   10) % 10
            d = int(j /    1) % 10
            if check_ab(a,b) and \
                check_ab(b,c) and \
                check_ab(c,d):
                cnt += 1
                val = get_val(a)+get_val(b)+get_val(c)+get_val(d)
                print("{}".format(val))
                #print("{}{}{}{} {}".format(a,b,c,d,val))
    if False: # to make data3 and data4
        for j in range(10):
            print(j)
            for i in range(len(data1)):
                if j != int(data1[i][0]):
                    continue
                print("{}".format(data1[i]))
    #continue ## # for print data
    if debug: cnt = 1
    ans = 0

    first = -1
    last = -1
    for i in range(l):
        x = i%l
        dx = (x + 1) % l

        if debug: cnt = 0
        #if debug: print("({}) =>".format(x))
        min_val = 99999
        min_idx = -1
        min_abcd = ""
        #for j in range(10000): #node
        if -1 is not last:
            arr = data5[last]
            for j in arr: # Hash table
                j = int(j)
                a = int(j / 1000) % 10
                b = int(j /  100) % 10
                c = int(j /   10) % 10
                d = int(j /    1) % 10
                if i+1 == l:  # no dp version
                    if -1 != first and c != first: continue
                    #if 2 <= l and -1 != dp[(i+2)%l] and c != dp[(i+2)%l]: continue
                    #if 3 <= l and -1 != dp[(i+3)%l] and d != dp[(i+3)%l]: continue
                if check(last,b,i+0):
                    #print("({}) {}=>{}".format(i+0, last,b))
                    if check(b,c,i+1):
                        #print("\t({}) {}=>{}".format(i+1, b,c))
                        if check(c,d,i+2):
                            #print("\t\t({}) {}=>{}".format(i+2, c,d))
                            if debug: cnt += 1
                            val = get_val(last)+get_val(b)+get_val(c)+get_val(d)
                            #if debug: print("abcd={}{}{}{} val={}".format(a,b,c,d,val))
                            min_abcd = "{}{}{}{}".format(last,b,c,d)
                            if val < min_val: 
                                min_val = val
                                min_idx = b
                                break
        else:
            for j in data1: #node
                j = int(j)
                a = int(j / 1000) % 10
                b = int(j /  100) % 10
                c = int(j /   10) % 10
                d = int(j /    1) % 10
                if i+1 == l:  # no dp version
                    if -1 != first and c != first: continue
                else:
                    if -1 != last and a != last: continue
                    #if 2 <= l and -1 != dp[(i+2)%l] and c != dp[(i+2)%l]: continue
                    #if 3 <= l and -1 != dp[(i+3)%l] and d != dp[(i+3)%l]: continue
                if check(a,b,i+0) and \
                    check(b,c,i+1) and \
                    check(c,d,i+2):
                    if debug: cnt += 1
                    val = get_val(a)+get_val(b)+get_val(c)+get_val(d)
                    #if debug: print("abcd={}{}{}{} val={}".format(a,b,c,d,val))
                    min_abcd = "{}{}{}{}".format(a,b,c,d)
                    if val < min_val: 
                        min_val = val
                        min_idx = b
                        break
        #if debug: print("min={}".format(min_idx))
        dp[dx] = min_idx
        #if debug: print(dp)# no dp version
        #if debug: print("")
        last = min_idx # no dp version
        if first == -1: first = min_idx
        ans += get_val(min_idx)
        #if debug: print(cnt)
        #if debug: print(min_abcd)

    #if debug: print(w[0])
    #if debug: print(w[1])
    #if debug: print(dp)# no dp version
    print(ans)
if debug:
    print(" {} seconds".format(time.process_time() - start_time))
